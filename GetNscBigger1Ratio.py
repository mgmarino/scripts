import ROOT,sys

def main(files):
  ROOT.gSystem.Load("libEXOUtilities")
  t = ROOT.TChain("tree")
  for f in files:
    t.Add(f)
  print("Chain has "+str(t.GetEntries())+" entries")
  c1 = ROOT.TCanvas("nsc")
  t.Draw("@fScintClusters.size()>>h")
  ratio = ROOT.h.Integral(3,20)/ROOT.h.Integral(1,20)
  print("Ratio = "+str(ratio))
  #t.Draw("fScintClusters.GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + fScintClusters.GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth)")
  #raw_input("continue")
  t.Draw("GetScintillationCluster(0).fTime/1000 - GetScintillationCluster(1).fTime/1000>>hTime1(2048,-1024,1024)","@fScintClusters.size() == 2 && (GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth)) < (GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth))","goff")
  t.Draw("GetScintillationCluster(1).fTime/1000 - GetScintillationCluster(0).fTime/1000>>hTime2(2048,-1024,1024)","@fScintClusters.size() == 2 && (GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth)) > (GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth))","goff")
  hTime1 = ROOT.gDirectory.Get("hTime1")
  hTime2 = ROOT.gDirectory.Get("hTime2")
  print(type(hTime1))
  hTime = ROOT.TH1F(hTime1)
  hTime.Add(hTime2)
  c2 = ROOT.TCanvas("time difference")
  hTime.Draw()
  t.Draw("GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth)>>hEnergyLarger1(400,0,6000)","@fScintClusters.size() == 2 && (GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth)) > (GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth))","goff")
  t.Draw("GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth)>>hEnergyLarger2(400,0,6000)","@fScintClusters.size() == 2 && (GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth)) < (GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth))","goff")
  hEnergyLarger1 = ROOT.gDirectory.Get("hEnergyLarger1")
  hEnergyLarger2 = ROOT.gDirectory.Get("hEnergyLarger2")
  hEnergyLarger = ROOT.TH1F(hEnergyLarger1)
  hEnergyLarger.Add(hEnergyLarger2)
  c3 = ROOT.TCanvas("energy of larger scint")
  hEnergyLarger.Draw()
  t.Draw("GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth)>>hEnergySmaller1(400,0,6000)","@fScintClusters.size() == 2 && (GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth)) < (GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth))","goff")
  t.Draw("GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth)>>hEnergySmaller2(400,0,6000)","@fScintClusters.size() == 2 && (GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(0).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth)) > (GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kNorth) + GetScintillationCluster(1).GetCountsSumOnAPDPlane(EXOMiscUtil::kSouth))","goff")
  hEnergySmaller1 = ROOT.gDirectory.Get("hEnergySmaller1")
  hEnergySmaller2 = ROOT.gDirectory.Get("hEnergySmaller2")
  hEnergySmaller = ROOT.TH1F(hEnergySmaller1)
  hEnergySmaller.Add(hEnergySmaller2)
  c4 = ROOT.TCanvas("energy of smaller scint")
  hEnergySmaller.Draw()
  raw_input("enter to quit")

if __name__ == "__main__":
  if len(sys.argv) < 2:
    print("usage: "+sys.argv[0]+" file(s)")
    sys.exit(1)
  main(sys.argv[1:])
